/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/signin": {
    /**
     * ユーザ認証を行います。
     *  ユーザのメールアドレス・パスワードによるBasic認証を行い、認証済みユーザには認証トークンを返却します。
     */
    post: {
      parameters: {
        body: {
          /** Request Body */
          body: definitions["SigninRequest"];
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["SigninResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
  };
  "/users": {
    /**
     * ユーザ情報（ユーザ名）を取得します。
     *  Authorizationヘッダーに認証情報（JWTトークン）を `Bearer XXX` の形式で付与することで、認証処理やユーザ情報の検索を行います。
     */
    get: {
      parameters: {
        header: {
          /** 認証トークン(JWT) `Bearer XXX` */
          Authorization: string;
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["UserGetResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
    /** ユーザ情報（ユーザ名）の更新をします。 */
    put: {
      parameters: {
        header: {
          /** 認証トーク(JWT) `Bearer XXX` */
          Authorization: string;
        };
        body: {
          /** Request Body */
          body: definitions["UserUpdateRequest"];
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["UserUpdateResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
    /**
     * ユーザ情報を作成します。
     *  ユーザの名前情報、メールアドレス、パスワードをリクエストで受け取り、ユーザIDと認証用のトークンを生成しデータベースへ保存します。
     *  生成された認証用のトークンがレスポンスとして返されます。
     */
    post: {
      parameters: {
        body: {
          /** Request Body */
          body: definitions["UserCreateRequest"];
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["UserCreateResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
  };
  "/public/books": {
    /**
     * 書籍一覧を取得します。
     *  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。
     *  例）21件目のデータから取得したい場合は、 `/books/public?offset=20` となります。
     */
    get: {
      parameters: {
        query: {
          /** 何番目のから10件取得するか */
          offset?: string;
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["bookListPublicResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
  };
  "/books": {
    /**
     * 書籍一覧を取得します。
     *  10件ずつしかデータが返ってこないため、次の10件を取得したい場合はクエリパラメータの `offset` に何番目のデータまでは取得したのかを指定しなくてはなりません。
     *  例）21件目のデータから取得したい場合は、 `/books?offset=20` となります。
     */
    get: {
      parameters: {
        header: {
          /** 認証トーク(JWT) `Bearer XXX` */
          Authorization: string;
        };
        query: {
          /** 何番目のから10件取得するか */
          offset?: string;
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["bookListGetResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
    /** 書籍の新規作成をします。 */
    post: {
      parameters: {
        header: {
          /** 認証トークン(JWT) `Bearer XXX` */
          Authorization: string;
        };
        body: {
          /** Request Body */
          body: definitions["bookCreateRequest"];
        };
      };
      responses: {
        /** A successful response. */
        200: unknown;
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
  };
  "/books/{id}": {
    /** 書籍情報を取得します。 */
    get: {
      parameters: {
        header: {
          /** 認証トーク(JWT) `Bearer XXX` */
          Authorization: string;
        };
        path: {
          /** 書籍ID */
          id: string;
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["bookGetResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Not found error */
        404: {
          schema: definitions["NotFoundError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
    /** 書籍の更新をします。 */
    put: {
      parameters: {
        path: {
          /** 書籍ID */
          id: string;
        };
        header: {
          /** 認証トーク(JWT) `Bearer XXX` */
          Authorization: string;
        };
        body: {
          /** Request Body */
          body: definitions["bookUpdateRequest"];
        };
      };
      responses: {
        /** A successful response. */
        200: {
          schema: definitions["bookUpdateResponse"];
        };
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Not found error */
        404: {
          schema: definitions["NotFoundError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
    /** 書籍の削除をします。 */
    delete: {
      parameters: {
        path: {
          /** 書籍ID */
          id: string;
        };
        header: {
          /** 認証トーク(JWT) `Bearer XXX` */
          Authorization: string;
        };
      };
      responses: {
        /** A successful response. */
        200: unknown;
        /** Requested data was wrong */
        400: {
          schema: definitions["BadRequestError"];
        };
        /** Unauthorized error */
        401: {
          schema: definitions["UnauthorizedError"];
        };
        /** Not found error */
        404: {
          schema: definitions["NotFoundError"];
        };
        /** Internal server error */
        500: {
          schema: definitions["InternalServerError"];
        };
      };
    };
  };
}

export interface definitions {
  SigninRequest: {
    /** @description メールアドレス */
    email?: string;
    /** @description パスワード */
    password?: string;
  };
  SigninResponse: {
    /** @description クライアント側で保存するトークン */
    token?: string;
  };
  UserCreateRequest: {
    /** @description ユーザ名 */
    name?: string;
    /** @description メールアドレス */
    email?: string;
    /** @description パスワード */
    password?: string;
  };
  UserCreateResponse: {
    /** @description クライアント側で保存するトークン */
    token?: string;
  };
  UserGetResponse: {
    /** @description ユーザ名 */
    name?: string;
  };
  UserUpdateRequest: {
    /** @description ユーザ名 */
    name?: string;
  };
  UserUpdateResponse: {
    /** @description ユーザ名 */
    name?: string;
  };
  bookCreateRequest: {
    /** @description 書籍タイトル */
    title?: string;
    /** @description 書籍情報参照URL */
    url?: string;
    /** @description 書籍詳細情報 */
    detail?: string;
    /** @description 読んだ感想 */
    review?: string;
  };
  bookGetResponse: {
    /** @description 書籍id */
    id?: string;
    /** @description 書籍タイトル */
    title?: string;
    /** @description 書籍情報参照URL */
    url?: string;
    /** @description 書籍詳細情報 */
    detail?: string;
    /** @description 読んだ感想 */
    review?: string;
    /** @description レビュー者（ユーザ名） */
    reviewer?: string;
    /** @description 自分の投稿かどうか */
    isMine?: boolean;
  };
  bookUpdateRequest: {
    /** @description 書籍タイトル */
    title?: string;
    /** @description 書籍情報参照URL */
    url?: string;
    /** @description 書籍詳細情報 */
    detail?: string;
    /** @description 読んだ感想 */
    review?: string;
  };
  bookUpdateResponse: {
    /** @description 書籍id */
    id?: string;
    /** @description 書籍タイトル */
    title?: string;
    /** @description 書籍情報参照URL */
    url?: string;
    /** @description 書籍詳細情報 */
    detail?: string;
    /** @description 読んだ感想 */
    review?: string;
    /** @description レビュー者（ユーザ名） */
    reviewer?: string;
    /** @description 自分の投稿かどうか */
    isMine?: boolean;
  };
  bookListGetResponse: definitions["bookData"][];
  bookData: {
    /** @description 書籍id */
    id?: string;
    /** @description 書籍タイトル */
    title?: string;
    /** @description 書籍情報参照URL */
    url?: string;
    /** @description 書籍詳細情報 */
    detail?: string;
    /** @description 読んだ感想 */
    review?: string;
    /** @description レビュー者（ユーザ名） */
    reviewer?: string;
    /** @description 自分の投稿かどうか */
    isMine?: boolean;
  };
  bookListPublicResponse: definitions["bookDataPublic"][];
  bookDataPublic: {
    /** @description 書籍id */
    id?: string;
    /** @description 書籍タイトル */
    title?: string;
    /** @description 書籍情報参照URL */
    url?: string;
    /** @description 書籍詳細情報 */
    detail?: string;
    /** @description 読んだ感想 */
    review?: string;
    /** @description レビュー者（ユーザ名） */
    reviewer?: string;
  };
  NotFoundError: {
    /**
     * @description エラーコード
     * @example 404
     */
    ErrorCode?: number;
    /**
     * @description エラーメッセージ（日本語）
     * @example その書籍はまだレビューされていません。
     */
    ErrorMessageJP?: string;
    /**
     * @description エラーメッセージ（英語）
     * @example This book is not reviewed yet.
     */
    ErrorMessageEN?: string;
  };
  UnauthorizedError: {
    /**
     * @description エラーコード
     * @example 403
     */
    ErrorCode?: number;
    /**
     * @description エラーメッセージ（日本語）
     * @example 認証エラー
     */
    ErrorMessageJP?: string;
    /**
     * @description エラーメッセージ（英語）
     * @example You are not authorized user
     */
    ErrorMessageEN?: string;
  };
  BadRequestError: {
    /**
     * @description エラーコード
     * @example 400
     */
    ErrorCode?: number;
    /**
     * @description エラーメッセージ（日本語）
     * @example バリデーションエラー
     */
    ErrorMessageJP?: string;
    /**
     * @description エラーメッセージ（英語）
     * @example validation error
     */
    ErrorMessageEN?: string;
  };
  InternalServerError: {
    /**
     * @description エラーコード
     * @example 500
     */
    ErrorCode?: number;
    /**
     * @description エラーメッセージ（日本語）
     * @example サーバでエラーが発生しました。
     */
    ErrorMessageJP?: string;
    /**
     * @description エラーメッセージ（英語）
     * @example Error occurred at server.
     */
    ErrorMessageEN?: string;
  };
}

export interface operations {}

export interface external {}
